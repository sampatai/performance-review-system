# CI/CD Pipeline for .NET 9 Web API with Amazon ECS Deployment
# -----------------------------------------------------------
# This workflow automates the process of building, testing, containerizing,
# and deploying your .NET Web API to Amazon ECS using Docker and ECR.
# It runs on pushes and pull requests to dev, stage, and main branches.

name: CI/CD Pipeline

on:
  push:
    branches: [dev, stage, main]      # Trigger on push to these branches
  pull_request:
    branches: [dev, stage, main]      # Trigger on PRs to these branches

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest            # Use the latest Ubuntu runner

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup .NET 9 SDK
      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # Step 3: Restore NuGet dependencies for all projects
      - name: Restore dependencies
        run: dotnet restore OfficePerformanceReview.sln

      # Step 4: Build the solution in Release mode
      - name: Build solution
        run: dotnet build OfficePerformanceReview.sln --configuration Release --no-restore

      # Step 5: Run all tests in the solution
      - name: Run tests
        run: dotnet test OfficePerformanceReview.sln --configuration Release --no-build --verbosity normal

  deploy:
    name: Deploy
    needs: build-and-test             # Only run if build-and-test succeeds
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/stage' || github.ref == 'refs/heads/main')

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Configure AWS credentials for CLI and Docker
      # Requires secrets: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Login to Amazon ECR (Elastic Container Registry)
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 4: Build, tag, and push Docker image to ECR
      # Uses the commit SHA as the image tag for traceability
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}   # e.g., 123456789012.dkr.ecr.us-east-1.amazonaws.com/your-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG -f ./WebAPI/Dockerfile .
          docker push $ECR_REPOSITORY:$IMAGE_TAG

      # Step 5: Update ECS task definition with the new image
      # The container-name must match the name in your ECS task definition
      - name: Fill in the new image ID in the ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ secrets.ECS_TASK_DEFINITION }} # Path to your ECS task definition JSON
          container-name: webapi                              # Must match your ECS container name
          image: ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

      # Step 6: Deploy the updated task definition to ECS service
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}                # Your ECS service name
          cluster: ${{ secrets.ECS_CLUSTER }}                # Your ECS cluster name
          wait-for-service-stability: true                   # Wait until deployment is stable

      # Step 7: Optionally, upload published artifacts for debugging or further steps
      - name: Upload published artifacts
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ./publish

# ---------------------------
# How this workflow works:
# ---------------------------
# 1. On push or PR to dev, stage, or main, the workflow builds and tests your .NET solution.
# 2. If the build and tests succeed, it builds a Docker image for your WebAPI, tags it with the commit SHA, and pushes it to Amazon ECR.
# 3. It then updates your ECS task definition to use the new image and deploys it to your ECS service and cluster.
# 4. The deployment waits for the ECS service to become stable before finishing.
# 5. Artifacts are uploaded for optional debugging or further use.
#
# To use this workflow, you must:
# - Create an ECR repository and ECS cluster/service.
# - Store the required AWS and ECS secrets in your GitHub repository.
# - Ensure your ECS task definition and container name match the workflow.
